import * as vscode from "vscode"
import { searchFileByName } from "../core/utils"
import { PintOSExtensionError } from "./errors"
import { TestController } from "./PintosTestController"
import { uriFromCurrentWorkspace } from "./utils"

export default async ({ controllerWrap }: Args) => {
  const tab = vscode.window.tabGroups.activeTabGroup.activeTab

  if (!tab) {
    return
  }

  const uriFile: vscode.Uri = (<any> tab.input).uri

  if (!uriFile) {
    return
  }

  const resultfile = uriFile.fsPath
  const test = controllerWrap.controller.findTestByResultFile(resultfile)

  if (!test) {
    throw new PintOSExtensionError("Source file not found :(", "warning")
  }

  const target = searchFileByName(uriFromCurrentWorkspace(...test.id.split("/")).fsPath)
  const targetUri = target ? vscode.Uri.parse(target) : undefined

  if (!targetUri) {
    throw new PintOSExtensionError("Source file not found :(", "warning")
  }

  const document = await vscode.workspace.openTextDocument(targetUri)
  vscode.window.showTextDocument(document, vscode.ViewColumn.Beside)
}

export interface Args {
  controllerWrap: { controller: TestController }
}
